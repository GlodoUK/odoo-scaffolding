{%- raw -%}
name: ci

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
{%- endraw %}

on:
  pull_request:
    branches: {{ github_actions_ci_branches | tojson }}

{% raw %}
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            src:
              - 'odoo/custom/src/private/**'

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: "0"

      - uses: actions/setup-python@v4

      - name: Get python version
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: |
          pre-commit run --from-ref="origin/${{ github.base_ref }}" --to-ref=HEAD --show-diff-on-failure --color=always
      - name: Check that all files generated by pre-commit are in git
        run: |
          newfiles="$(git ls-files --others --exclude-from=.gitignore)"
          if [ "$newfiles" != "" ] ; then
              echo "Please check-in the following files:"
              echo "$newfiles"
              exit 1
          fi

  test:
    runs-on: ubuntu-latest
    needs:
      - changes
    if: ${{ needs.changes.outputs.src == 'true' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: "0"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup pipx
        run: |
          pipx install invoke
          pipx install pre-commit
          pipx ensurepath

      - name: Build image
        run: |
          invoke img-build

      - name: Run git-aggregate
        env:
          DEPTH_DEFAULT: 1
        run: |
          invoke git-aggregate

      - name: Run tests with coverage
        id: tests
        run: |
          invoke install -m l10n_generic_coa
          invoke test-changed -b "origin/${{ github.base_ref }}" --coverage

      - name: Create coverage XML report
        id: coverage_report
        continue-on-error: true
        run: |
          invoke test-coverage-report --format=xml

      - name: Post coverage report
        if: ${{ steps.coverage_report.outcome == 'success' }}
        uses: orgoro/coverage@v3.1
        with:
            coverageFile: odoo/auto/coverage.xml
            token: ${{ secrets.GITHUB_TOKEN }}
{%- endraw %}
